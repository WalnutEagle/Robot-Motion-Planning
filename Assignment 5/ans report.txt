The report questions in your assignment focus on analyzing and comparing the performance of different path-planning methods, particularly in the context of the sphere world problem. Here's a detailed response to the report questions:

### Question Report 1.2: Comparing Path-Planning Methods

1. **Performance Comparison between Current and Previous Methods**:
   - **Sampling-Based Methods vs. Potential-Based Methods**: The current homework focuses on sampling-based methods like the Exploration Sampling Tree (EST), which relies on randomly sampling the environment to build a path. This method can be effective in complex environments where potential-based methods struggle. Potential-based methods, on the other hand, use a potential field to guide the path, which can be simpler and more efficient in less complex environments but may fail in the presence of local minima or highly irregular terrains.
   - **Sampling-Based Methods vs. A***: A* algorithm is a deterministic search algorithm that uses heuristics to find the shortest path. It is generally more efficient in terms of computation time compared to sampling-based methods for less complex environments. However, in environments with many obstacles or in higher dimensions, sampling-based methods like EST may outperform A* due to their ability to explore large spaces more comprehensively.

2. **Applicability to Different Problems**:
   - For environments with few obstacles and a clear path, potential-based methods or A* could be more efficient and provide faster solutions.
   - In contrast, for complex environments with many obstacles or unknown terrains, sampling-based methods like EST are more suitable as they can explore the space more thoroughly and are less likely to get trapped in local minima.

### Question Optional 1.2: Variance of Path Lengths

- To address this question, you would need to modify and run `sampleTree_search_test()` multiple times on the same data. This test will allow you to observe the variance in the length of paths found across different trials, highlighting the stochastic nature of sampling-based methods. In general, sampling-based methods may exhibit higher variance in path lengths due to their random nature, compared to deterministic methods like A*.

In your report, you should include a table with the different values of `goalDistThreshold` and `radius` you tried and note their impact on the planner's performance. Additionally, including images or graphs showing the paths found under different parameter sets can significantly enhance the understanding of how these parameters affect the planner's behavior in different environments【12†source】.











For Report Question 1.1 in your assignment, you are required to test your planner and analyze its performance. The task involves using the `sampleTree_search_test()` function to evaluate the effectiveness of your path planning algorithm in the sphere world environment. Here's how you can approach this:

1. **Running `sampleTree_search_test()`:**
   - **Loading Variables**: The function first loads the variables `world`, `xStart`, and `xEnd` from the file `sphereWorld.mat`. These variables define the environment (world), the starting locations, and the goal locations for the planner.
   - **Finding Paths**: For each pair of starting and goal locations, the function calls `sampleTree_search()` to find a path. This step is crucial as it tests the planner's ability to navigate through the environment and reach the goal from different starting points.
   - **Plotting Results**: After finding the paths, the function calls `sphereworld_plot()` and overimposes all the trajectories from the start locations to the goal locations. This visual representation allows you to assess the paths generated by your planner and identify any patterns or issues.

2. **Analyzing Planner Performance:**
   - **Success Rate**: Evaluate how often your planner successfully finds a path to the goal. A high success rate indicates effective planning.
   - **Path Efficiency**: Look at the length and complexity of the paths. Shorter, more direct paths generally indicate better performance.
   - **Robustness**: Consider the variety of start and goal locations. A robust planner should perform well across a range of scenarios.

3. **Improving Performance**: 
   - If your planner fails frequently or takes too long, consider adjusting parameters like `goalDistThreshold` or `radius`. These adjustments can help your planner navigate more effectively through the environment.

In your report, include detailed observations from these tests, possibly supported by visual plots of the paths. Discuss any trends you notice, areas where the planner excels, and aspects that need improvement. This analysis will provide valuable insights into the effectiveness and limitations of your path planning algorithm【18†source】.